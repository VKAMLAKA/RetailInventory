package com.example.RetailInventory;

import com.google.cloud.vertexai.VertexAI;
import com.google.cloud.vertexai.api.*;
import com.google.cloud.vertexai.generativeai.*;
import com.google.protobuf.ByteString;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

@SpringBootApplication
public class RetailInventoryApplication {

	public static void main(String[] args) throws IOException {
		SpringApplication.run(RetailInventoryApplication.class, args);
		// TODO(developer): Replace these variables before running the sample.
		String projectId = "cap-neural-ninjas";
		String location = "asia-northeast1";
		String modelName = "gemini-1.0-pro-vision-001";

		String output = generateContent(projectId, location, modelName);
		System.out.println(output);

		parseImage(projectId,location);
	}

	public static String generateContent(String projectId, String location, String modelName) throws IOException {

		try (VertexAI vertexAI = new VertexAI(projectId, location)) {

			GenerationConfig generationConfig =
					GenerationConfig.newBuilder()
							.setMaxOutputTokens(2048)
							.setTemperature(0.0F)
							.setTopK(32)
							.setTopP(1)
							.build();

			GenerativeModel model = new GenerativeModel(modelName, generationConfig, vertexAI);

			GenerateContentResponse response = model.generateContent("based on below previous sales, expiry date, and current available stock, give me some discount offers.\\n\\nincrease discount for nearing expiry products.\\nfor fresh products, same price as sold before.\\nignore expired products.\\ngive new prices with offers for each product for fresh and nearly expired items.\\nconsider previous sales data for applying offers - For products having more sell, less discount for nearly expiring.\\nFor products with less sell, more discount for nearly expiring.\\n\\n\\nProduct: Apples, Previous sold quantity: 20, prices: 10 rs per piece\\nProduct: Mango, Previous sold quantity: 10, prices: 50 rs per piece\\n\\nCurrent available stock with expiry dates:\\n\\nApple: 20 fresh, 10 (expiry in 5 days), 5(Expiry in 2 days), 5 expired\\nmango: 20 fresh, 10 (expiry in 5 days), 5(Expiry in 2 days), 5 expired");
			String output = ResponseHandler.getText(response);
			return output;
		}
	}

	public static void parseImage(String projectId, String location) throws IOException {
		try (VertexAI vertexAI = new VertexAI(projectId, location)) {

			GenerationConfig generationConfig =
					GenerationConfig.newBuilder()
							.setMaxOutputTokens(2048)
							.setTemperature(0.4F)
							.setTopK(32)
							.setTopP(1)
							.build();

			GenerativeModel model = new GenerativeModel("gemini-1.0-pro-vision-001", generationConfig, vertexAI);

			String textPromt="what is expiry date of given product?";

//			Content content = ContentMaker.fromMultiModalData(
//					textPromt,
//					PartMaker.fromMimeTypeAndData("image/jpg", "gs://images-for-data-fetch/bis2.jpg")
//			);
//			ResponseStream<GenerateContentResponse> response = model.generateContentStream(content);
//			response.stream().forEach(System.out::println);

			List<Content> contents = new ArrayList<>();
			contents.add(Content.newBuilder().setRole("user").addParts(Part.newBuilder().setInlineData(Blob.newBuilder().setMimeType("image/jpeg").
					setData(ByteString.copyFrom(Base64.getDecoder().decode(""))))).
					addParts(Part.newBuilder().setText("what is expiry date of given product?")).build());

			ResponseStream<GenerateContentResponse> responseStream = model.generateContentStream(contents);
			responseStream.stream().forEach(System.out::println);
		}

	}


}
